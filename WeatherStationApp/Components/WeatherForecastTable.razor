@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using WeatherStationApp.Data

@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var result = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
                {
                    Scopes = new[] { "api://a63c9715-a1ab-4e91-b486-ccf0015c5842/WeatherStation.Read" }
                }
        );

        if (result.TryGetToken(out var token))
        {
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7222/WeatherForecast");
        }
    }
}
